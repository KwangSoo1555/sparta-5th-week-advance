// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// generator client {
//   provider = "prisma-client-js"
// }

// datasource db {
//   provider = "mysql"
//   url      = env("DATABASE_URL")
// }

// mysql workbench

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Users {
  id         Int       @id  @default(autoincrement())
  name       String
  email      String
  password   String

  role       RoleType  @default(APPLICANT)
  createdAt  DateTime  @default(now())                 @map("created_at")
  updatedAt  DateTime  @updatedAt                      @map("updated_at")

  userIdToResume       Resumes[]
  userIdToRefreshToken RefreshToken[]
  userIdToResumeLog    ResumeLog[]
}

enum RoleType { 
  APPLICANT 
  RECRUITER 
}

model Resumes {
  id            Int     @id  @default(autoincrement())
  userId        Int                                     @map("user_Id")
  title         String
  introduce     String  @db.Text

  resumeStatus  resumeStatusType  @default(APPLY)  @map("resume_status")
  createdAt     DateTime          @default(now())  @map("created_at")
  updatedAt     DateTime          @updatedAt       @map("updated_at")

  resumeIdToResumeLog ResumeLog[]

  Users Users @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum resumeStatusType {
  APPLY
  DROP
  PASS
  INTERVIEW1
  INTERVIEW2
  FINAL_PASS
}

model RefreshToken {
  id            Int       @id  @default(autoincrement())
  userId        Int       @unique                         @map("user_id")
  refreshToken  String?                                   @map("refresh_token")

  ip            String
  userAgent     String                                    @map("user_agent")
  createdAt     DateTime  @default(now())                 @map("created_at")
  updatedAt     DateTime  @updatedAt                      @map("updated_at")

  Users Users @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("RefreshToken")
}

model ResumeLog {
  id           Int       @id  @default(autoincrement())
  resumeId     Int                                       @map("resume_id")
  recruiterId  Int                                       @map("recruiter_id")

  oldStatus    String                                    @map("old_status")
  newStatus    String                                    @map("new_status")
  reason       String
  createdAt    DateTime  @default(now())                 @map("created_at")

  Resume Resumes @relation(fields: [resumeId], references: [id], onDelete: Cascade)
  Users  Users   @relation(fields: [recruiterId], references: [id], onDelete: Cascade)

  @@map("ResumeLog")
}