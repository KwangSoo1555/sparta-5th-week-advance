// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// generator client {
//   provider = "prisma-client-js"
// }

// datasource db {
//   provider = "mysql"
//   url      = env("DATABASE_URL")
// }

// mysql workbench

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Users {
  userId     Int       @id  @default(autoincrement())  @map("userId")
  name       String    @unique                         @map("name")
  email      String    @unique                         @map("email")
  password   String                                    @map("password")

  role       String    @default("APPLICANT")           @map("role")
  createdAt  DateTime  @default(now())                 @map("createdAt")
  updatedAt  DateTime  @updatedAt                      @map("updatedAt")

  userIdToResume       Resume[]
  userIdToRefreshToken RefreshToken[]
  userIdToResumeLog    ResumeLog[]

  @@map("Users")
}

enum Role { 
  APPLICANT 
  RECRUITER 
}

model Resume {
  resumeId           Int       @id  @default(autoincrement())  @map("resumeId")
  UserId             Int                                       @map("UserId")
  title              String                                    @map("title")
  introduce          String    @db.Text                        @map("introduce")

  applicationStatus  String    @default("APPLY")               @map("applicationStatus")
  createdAt          DateTime  @default(now())                 @map("createdAt")
  updatedAt          DateTime  @updatedAt                      @map("updatedAt")

  resumeIdToResumeLog ResumeLog[]

  Users Users @relation(fields: [UserId], references: [userId], onDelete: Cascade)

  @@map("Resume")
}

enum applicationStatus {
  APPLY
  DROP
  PASS
  INTERVIEW1
  INTERVIEW2
  FINAL_PASS
}

model RefreshToken {
  tokenId    Int       @id  @default(autoincrement())  @map("tokenId")
  UserId     Int       @unique                         @map("UserId")
  token      String    @unique                         @map("token")

  ip         String                                    @map("ip")
  userAgent  String                                    @map("userAgent")
  expiresAt  DateTime                                  @map("expiresAt")
  createdAt  DateTime  @default(now())                 @map("createdAt")

  Users Users @relation(fields: [UserId], references: [userId], onDelete: Cascade)

  @@map("RefreshToken")
}

model ResumeLog {
  ResumeId     Int                                       @map("ResumeId")
  logId        Int       @id  @default(autoincrement())  @map("logId")
  recruiterId  Int                                       @map("recruiterId")

  oldStatus    String                                    @map("odStatus")
  newStatus    String                                    @map("newStatus")
  reason       String                                    @map("reason")
  createdAt    DateTime  @default(now())                 @map("createdAt")

  Resume Resume @relation(fields: [ResumeId], references: [resumeId], onDelete: Cascade)
  Users Users @relation(fields: [recruiterId], references: [userId], onDelete: Cascade)

  @@map("ResumeLog")
}